plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
   localPropertiesFile.withReader('UTF-8') { reader ->
       localProperties.load(reader)
   }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
   throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
   flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
   flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
   keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
   namespace "com.custombank.app"
   compileSdkVersion 34
   ndkVersion flutter.ndkVersion

   compileOptions {
       sourceCompatibility JavaVersion.VERSION_17
       targetCompatibility JavaVersion.VERSION_17
   }

   kotlinOptions {
       jvmTarget = '17'
   }

   sourceSets {
       main.java.srcDirs += 'src/main/kotlin'
   }

   defaultConfig {
       applicationId "com.custombank.app"
       minSdkVersion 21
       targetSdkVersion 34
       versionCode flutterVersionCode.toInteger()
       versionName flutterVersionName
       multiDexEnabled true
   }

   signingConfigs {
       if (keystorePropertiesFile.exists()) {
           release {
               keyAlias keystoreProperties['keyAlias']
               keyPassword keystoreProperties['keyPassword']
               storeFile file(keystoreProperties['storeFile'])
               storePassword keystoreProperties['storePassword']
           }
       }
   }

   buildTypes {
       release {
           signingConfig signingConfigs.release
           minifyEnabled true
           shrinkResources true
           proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
           
           ndk {
               abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
           }
       }
   }

   dexOptions {
       javaMaxHeapSize "4g"
   }

   configurations.all {
       resolutionStrategy {
           force 'com.google.android.play:core:1.10.3'
           force 'com.google.android.play:core-ktx:1.8.1'
           force 'com.google.android.play:feature-delivery:2.1.0'
       }
   }

   // Correctly placed inside android block
   packaging {
       resources {
           excludes += '/META-INF/DEPENDENCIES'
           excludes += '/META-INF/LICENSE'
           excludes += '/META-INF/LICENSE.txt'
           excludes += '/META-INF/license.txt'
           excludes += '/META-INF/NOTICE'
           excludes += '/META-INF/NOTICE.txt'
           excludes += '/META-INF/notice.txt'
           excludes += '/META-INF/*.kotlin_module'
       }
   }
}

flutter {
   source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Play Core dependencies
    implementation 'com.google.android.play:core:1.10.3'
    implementation 'com.google.android.play:core-ktx:1.8.1'
    
    // Split installation support
    implementation 'com.google.android.play:feature-delivery:2.1.0'
    implementation 'com.google.android.play:feature-delivery-ktx:2.1.0'
    
    // Tasks API
    implementation 'com.google.android.gms:play-services-tasks:18.0.2'
}